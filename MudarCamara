package testfloor;

import javax.vecmath.*;

import java.awt.*;
import java.awt.event.*;

import javax.media.j3d.*;

import com.sun.j3d.utils.universe.*;
import com.sun.j3d.utils.geometry.*;

import java.applet.*;

import com.sun.j3d.utils.applet.MainFrame;

public class TestFloor extends Applet {
	public static void main(String[] args) {
		new MainFrame(new TestFloor(), 640, 480);
	}

	public void init() {
		// create canvas
		GraphicsConfiguration gc = SimpleUniverse.getPreferredConfiguration();
		Canvas3D cv = new Canvas3D(gc);
		setLayout(new BorderLayout());
		add(cv, BorderLayout.CENTER);
		BranchGroup bg = createSceneGraph();
		bg.compile();
		SimpleUniverse su = new SimpleUniverse(cv);
		su.getViewingPlatform().setNominalViewingTransform();
		
		TransformGroup tg = su.getViewingPlatform().getMultiTransformGroup().getTransformGroup(0);
		Transform3D tr = new Transform3D();
		tr.lookAt(new Point3d(2,2,2), new Point3d(0,0,0), new Vector3d(0,1,0));
		
		su.addBranchGraph(bg);
		
		
	}

	private BranchGroup createSceneGraph() {
		BranchGroup root = new BranchGroup();

		BoundingSphere bounds = new BoundingSphere();

		// spin
		TransformGroup spin = new TransformGroup();
		spin.setCapability(TransformGroup.ALLOW_TRANSFORM_WRITE);
		root.addChild(spin);
		Alpha alpha = new Alpha(-1, 4000);
		RotationInterpolator rotator = new RotationInterpolator(alpha, spin);
		rotator.setSchedulingBounds(bounds);
		spin.addChild(rotator);

		// rotating object
		Appearance ap = new Appearance();
		ap.setMaterial(new Material());
		Shape3D shape = new Shape3D(new Tetrahedron(), ap);
		Transform3D tr = new Transform3D();
		tr.setScale(0.15);
		TransformGroup tg = new TransformGroup(tr);
		spin.addChild(tg);
		tg.addChild(shape);

		// floor
		ap = new Appearance();
		Shape3D floor = new Shape3D(createFloorGeometry(), ap);
		tr = new Transform3D();
		tr.set(new Vector3f(0f, -0.40f, 0f));
		tr.setScale(0.2);
		tg = new TransformGroup(tr);
		root.addChild(tg);
		tg.addChild(floor);

		// background and light
		Background background = new Background(1f, 1f, 1f);
		background.setApplicationBounds(bounds);
		root.addChild(background);
		AmbientLight light = new AmbientLight(true, new Color3f(Color.red));
		light.setInfluencingBounds(bounds);
		root.addChild(light);
		PointLight ptlight = new PointLight(new Color3f(Color.green), new Point3f(3f, 3f, 3f), new Point3f(1f, 0f, 0f));
		ptlight.setInfluencingBounds(bounds);
		root.addChild(ptlight);
		return root;
	}

	private Geometry createFloorGeometry() {
		int m = 21;
		float a = -6f;
		float b = 6f;
		float divX = (b - a) / m;

		int n = 21;
		float c = -6;
		float d = 6;
		float divZ = (d - c) / n;

		int totalPts = m * n * 4;

		boolean flag = true;

		QuadArray qa = new QuadArray(totalPts, QuadArray.COORDINATES | QuadArray.COLOR_3);

		Point3f[] pts = new Point3f[totalPts];
		Color3f[] col = new Color3f[totalPts];


		int idx = 0;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
              
				//1ยบ 
				float x = a + i * divX;
				float y = 0;
				float z = c + j * divZ;
				pts[idx] = new Point3f(x, y, z);
				col[idx] = (flag ? new Color3f(Color.BLACK) : new Color3f(Color.RED));
				idx ++;
				
				//2ยบ
				x = a + i * divX;
				z = c + (j+1) * divZ;
				pts[idx] = new Point3f(x, y, z);
				col[idx] = (flag ? new Color3f(Color.BLACK) : new Color3f(Color.RED));
				idx ++;
				
				//3ยบ
				x = a + (i+1) * divX;
				z = c + (j+1) * divZ;
				pts[idx] = new Point3f(x, y, z);
				col[idx] = (flag ? new Color3f(Color.BLACK) : new Color3f(Color.RED));
				idx ++;
				
				//4ยบ
				x = a + (i+1) * divX;
				z = c + j * divZ;
				pts[idx] = new Point3f(x, y, z);
				col[idx] = (flag ? new Color3f(Color.BLACK) : new Color3f(Color.RED));
				idx ++;
				
				flag = !flag;
			}
		}


		qa.setCoordinates(0, pts);
		qa.setColors(0, col);
		
		return qa;
	}

}
