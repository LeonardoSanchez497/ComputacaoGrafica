package ip1819_;

import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.WritableRaster;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;

public class IP1819_ extends JFrame implements ActionListener {

	ImagePanel imgSrc, imgDst;
	JFileChooser fc = new JFileChooser("c:/img");

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		JFrame frame = new IP1819_();
		frame.setTitle("IP1819");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.pack();
		frame.setVisible(true);

	}

	public IP1819_() {
		JMenuBar mb = new JMenuBar();
		setJMenuBar(mb);

		JMenu menu = new JMenu("File");

		JMenuItem m1 = new JMenuItem("Open Image");
		m1.addActionListener(this);

		menu.add(m1);
		m1 = new JMenuItem("Save Image");
		m1.addActionListener(this);
		menu.add(m1);
		m1 = new JMenuItem("Copy Image");
		m1.addActionListener(this);
		menu.add(m1);
		m1 = new JMenuItem("Exit");
		m1.addActionListener(this);
		menu.add(m1);

		mb.add(menu);

		menu = new JMenu("Processing");
		m1 = new JMenuItem("RGB to Gray");
		m1.addActionListener(this);
		menu.add(m1);
		m1 = new JMenuItem("RGB to Gray v2");
		m1.addActionListener(this);
		menu.add(m1);
		m1 = new JMenuItem("Edge");
		m1.addActionListener(this);
		menu.add(m1);
		m1 = new JMenuItem("Smooth");
		m1.addActionListener(this);
		menu.add(m1);
		mb.add(menu);

		imgSrc = new ImagePanel();
		imgDst = new ImagePanel();
		Container cp = this.getContentPane();
		cp.setLayout(new FlowLayout());
		cp.add(imgSrc);
		cp.add(imgDst);

	}

	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
		String cmd = e.getActionCommand();

		if ("Open Image".equals(cmd)) {
			int result = fc.showOpenDialog(this);
			if (result == JFileChooser.APPROVE_OPTION) {
				try {
					BufferedImage bi = ImageIO.read(fc.getSelectedFile());
					imgSrc.setImage(bi);
					pack();
				} catch (IOException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
			}
		} else if ("Save Image".equals(cmd)) {
			
		} else if ("Copy Image".equals(cmd)) {
			imgSrc.setImage(imgDst.getImage());
			
		} else if ("Exit".equals(cmd)) {
			System.exit(0);
		} else
			processing(cmd);
	}

	private void processing(String cmd) {
		BufferedImageOp op = null;

		if (cmd.equals("RGB to Gray")) {
			op = new ColorConvertOp(ColorSpace.getInstance(ColorSpace.CS_GRAY), null);
		} else if (cmd.equals("RGB to Gray v2")) {
			imgDst.setImage(RGBToGray(imgSrc.getImage()));
			pack();
		} else if(cmd.equals("Edge")) {
			float[] data = {0f, -1f, 0f,
							-1f, 4f, -1f,
							0f, -1f, 0f};
			Kernel k = new Kernel(3, 3, data);
			op = new ConvolveOp(k);
		} else if(cmd.equals("Smooth")) {
					float[] data = {1/9f, 1/9f, 1/9f,
							1/9f, 1/9f,1/9f,
							1/9f, 1/9f,1/9f};
					Kernel k = new Kernel(3, 3, data);
					op = new ConvolveOp(k);
		}

		if (op != null) {
			imgDst.setImage(op.filter(imgSrc.getImage(), null));
			pack();

		}

	}

	private BufferedImage RGBToGray(BufferedImage imgIn) {
		BufferedImage imgOut = new BufferedImage(imgIn.getWidth(), imgIn.getHeight(), imgIn.getType());

		WritableRaster rasterImgIn = imgIn.getRaster();
		WritableRaster rasterImgOut = imgOut.getRaster();
		int[] rgba = new int[4];

		for (int y = 0; y < imgIn.getHeight(); y++) {
			for (int x = 0; x < imgIn.getWidth(); x++) {

				rasterImgIn.getPixel(x, y, rgba);

				int gray = (int) ((rgba[0] + rgba[1] + rgba[2]) / 3f);

				rgba[0] = rgba[1] = rgba[2] = gray;

				rasterImgOut.setPixel(x, y, rgba);

			}
		}

		return imgOut;
	}

}

class ImagePanel extends JPanel {
	BufferedImage image = null;

	public ImagePanel() {
		setPreferredSize(new Dimension(265, 256));

	}

	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		Graphics2D g2 = (Graphics2D) g;

		if (image == null)
			g2.drawRect(0, 0, getWidth() - 1, getHeight() - 1);
		else
			g2.drawImage(image, 0, 0, this);

	}

	public void setImage(BufferedImage bi) {
		image = bi;
		setPreferredSize(new Dimension(bi.getWidth(), bi.getHeight()));
		repaint();
	}

	public BufferedImage getImage() {
		return image;
	}
}
